---
title: "[Demographic Health Survey Data in R]{.flow}"
title-block-banner: true

subtitle: "Pakistan Demographic Health Survey Data"
format: 
  html: 
    theme: [default, custom.css, styles.scss]
    toc: true
execute: 
  freeze: true
---

Prof.Dr. Zahid Asghar, School of Economics, QAU![](images/zahid.jpg){.r-stretch}

## Purpose

Main purpose of this post is to explain how to download and read `DHS` data in R, how to create variables, make tables and cross-tables and run a simple logit regression. I am using in this post is `IR` which is the individual (women's) recode file. For more details about files you can visit [dhs](dhsprogram.com). USAID main sponsoring agency of DHS data has recently started using open community software for `DHS` data. I am using it for Pakistani data 2017-18. Main outline of this post is as follows:

i)  Reading dhs files in R from STATA (one can do with with SPSS and other formats as well)

ii) Creating new variables , tables, cross-tables, surveydesign and regression. I shall mainly use `tidyverse` package but you can use base R if you like.

## Install R and RStudio (Urdu/Hindi langues for this heading only)

Once you have installed R, Rtools (in some cases using Windows) and RStudio{{< video https://youtu.be/ZNBZevfYgo0 >}}, you need to install a package. A package is like fixing a bulb and you have to do it only once. Once you have installed relevant package(s), next is to recall it using `library()` which is like switching on a button of a bulb. There is base-R commands but very easy and useful is to learn `tidyverse` which consists of many useful packages, we will talk later on.

As always, the first thing we will do is load the tidyverse.

*Note: If you haven't yet installed the tidyverse, you'll first have to run the code install.packages("tidyverse").* You may get some warnings when you recall it. Ignore these warnings and go ahead. What are errors, warnings and messages, you may watch my video {{< video https://youtu.be/SRSNdCZ_QnE >}}.

## DHS data in R

Please have the dataset downloaded and ready to use. I shall use the IR file.You can download the model dataset [here](https://www.dhsprogram.com/data/Model-Datasets.cfm) For the code below to work, you must save the dataset in the same folder as your R scripts.

Install and load the packages you need. You only need to install packages once. After installing a package you can load the package using the library command.

### Load relevant packages

```{r}
#| warning: false
library(tidyverse) # its an umbrella library containing 9 important and widely used packages of R
library(naniar)   # to use replace_with_na function
library(haven)  # to read STATA/SPSS data
library(here)    # to check what is your file path
library(labelled) # to get labels of vairables
library(pollster)
library(gt)  # to get tables
library(survey)  # For analysis of complex survey data sets
here::here() # check your path/directory and make sure your data is in this directory
```

## Load data

As I have my data in a folder `data` , so I am giving a parth inside here of the relevant folder and then data.

```{r}
# open your dataset
#pkir <-  read_dta(here("data","PKIR71FL.dta"))
# 
# save(pkir, file = 'data/pkir.RData') #you can save data in R. It will reduce file size and if its correctly save, you can just click on data and it will be uploaded with the command as follows:

load("D:/RepTemplates/pdhs/data/pkir.RData")
```

## Modern contraceptive use

To recode modern contraceptive use into a binary variable, first I check category labels of `v313` representing methods used for family planning.

```{r}
print_labels(pkir$v313)  # print_labels command for variable labels
```

Recode `v313` as `1` if female is using modern method and 0 if otherwise. For this I use `mutate` for creating a new variable `modfp`. To create survey weight variables `wt`and finally a table of summary statistics is calculated.

```{r}
# creating a new categorical variable using mutate and case_when commands

pkir <- pkir |>
  mutate(modfp =
           case_when(v313 == 3 ~ 1,
                     v313 < 3 ~ 0 )) |>
  set_value_labels(modfp = c(yes = 1, no = 0)) |>
  set_variable_labels(modfp ="Currently used any modern method")

# creating the sampling weight variable. 
pkir <- pkir |> mutate(wt=v005/1000000)
#pkir$wt <- pkir$v005/1000000

# check with final report Table 7.3
topline(pkir, modfp, wt ) |> gt()


```

There are 24% females who are using modern family planning methods.

## Example 2

Number of ANC visits in 4 categories that match the table in the final report age of child needed for this indicator. If b19_01 is not available in the data use v008 - b3_01

```{r}
 pkir <- pkir |>
   mutate(age = b19_01)

pkir <- pkir |>
  mutate(age = v008 - b3_01)


pkir <- pkir |>
  mutate(ancvisits =
           case_when(
             m14_1 == 0 ~ 0 ,
             m14_1 == 1 ~ 1 ,
             m14_1  %in% c(2,3)   ~ 2 ,
             m14_1>=4 & m14_1<=90  ~ 3 ,
             m14_1>90  ~ 9 ,
             age>=60 ~ 99 )) |>
  replace_with_na(replace = list(ancvisits = c(99))) |>
  set_value_labels(ancvisits = c(none = 0, "1" = 1, "2-3"=2, "4+"=3, "don't know/missing"=9  )) |>
  set_variable_labels(ancvisits = "Number of ANC visits")

# check with final report Table 9.2
topline(pkir, ancvisits, wt ) |> gt() |> fmt_number(decimals = 2)
```

```{r}
library(gt)

topline(pkir, ancvisits, wt ) |> 
  gt() |> fmt_number(decimals = 2)

### Setting the survey design using the svydesign command from the survey package ###
# the survey design will be saved in an object named mysurvey, you can change this name to another name
mysurvey<-svydesign(id=pkir$v021, data=pkir, strata=pkir$v022,  weight=pkir$wt, nest=T)
options(survey.lonely.psu="adjust") 

# the option (survey.lonely.psu="adjust") is used to adjust for the case if there is single PSU within a stratum 

# now that we have set the survey design, we can use the survey package commands. See below for some examples.
```

```{r}



# Modern contraceptive use indicator. This indicator was also produced in the RecodingDHSVars.R
pkir <- pkir %>%
  mutate(modfp = 
           case_when(v313 == 3~ 1,
                     v313<3~ 0)) %>%   
  set_value_labels(modfp = c(yes = 1, no = 0)) %>%
  set_variable_labels(modfp ="Currently used any modern method")

# to get frequencies
svytable(~modfp, mysurvey)

# to get proportions
prop.table(svytable(~modfp, mysurvey))

#you can save the result in an object
table1 <- prop.table(svytable(~v106, mysurvey))

#then you can refer to this object later on
table1 
```

```{r}

#If you want sampling error (SE) and confidence intervals (CI), you can use svyby with by=1 for total
svyby(~modfp,by=1,  design=mysurvey, FUN=svymean, vartype=c("se", "ci"))

#if you want to do this for a categorical variable, then you should add as.factor
#below we did not need as.factor since we had a binary variable
#for instance education level, v106, has four categories. You can estimate the SE and cI for each category.
svyby(~as.factor(v106),by=1,  design=mysurvey, FUN=svymean, vartype=c("se", "ci"))


# Crosstabulation of modfp (modern FP use) and place of education (v106)
table2 <- svyby(~modfp, by = ~v106, design=mysurvey, FUN=svymean, vartype=c("se", "ci"))

table2
```

## chi-square results

```{r}
#| eval: false
svychisq(~modfp+v106, mysurvey)

# to see how the survey commands are used for regressions, please check the regression R script. 
# To do this for several variables at once, you can do the following

# List of variables to crosstabulate with your outcome
variables <- c("v013","v106", "v190","v025","v024") 

results <- list()  # Empty list to store the crosstabulation results

# Loop through the variables
for (var in variables) {
  # Crosstabulation using svyby
  crosstab <- svyby(~ modfp, by = as.formula(paste("~", var)), design = mysurvey, FUN = svymean, vartype = c("se", "ci"))
  
  chi_square <- svychisq(as.formula(paste("~ modfp +", var)), design = mysurvey)
  
  # Store results in list
  results[[var]] <- list(crosstab = crosstab, chi_square = chi_square)
}

# Access the crosstabulation results for each variable
for (var in variables) {
  print(paste("Crosstabulation for", var))
  print(results[[var]])
}

```

## Compute linear model

```{r}
reg1 <- svyglm(modfp~1+v025+as.factor(v013),
               design = mysurvey,
               family = binomial(link = 'logit'))
library(broom)
tidy(reg1)
# unadjusted with place of residence 
reg1 <- svyglm(modfp~ 1+ v025 , design=mysurvey, family=binomial(link="logit"))

# to see the results
summary(reg1)

# to get ORs
ORreg1 <- exp(reg1$coefficients )
ORreg1

# multivariate models with place of residence (v025), education (v106), and current age (v013)
reg2 <- svyglm(modfp~ 1+ v025 + as.factor(v106) + as.factor(v013), design=mysurvey, family=binomial(link="logit"))

tidy(reg2)

```

## checking for correlations

create a subset of data with variables you want to check

```{r}
cordata <- subset(pkir, select=c(v025, v106, v013 ,v190))

mycordata <- cor(cordata)
# we see that v025 and v190 may be highly correlated

# to produce a correlation plot
#install.packages("corrplot")
library(corrplot)

corrplot(mycordata)

```
